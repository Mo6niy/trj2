
pipeline {
    
    agent any
    
    parameters {
        string(name: 'ID', defaultValue: '')
        string(name: 'CLUSTER_NAME', defaultValue: '')
        string(name: 'REGION', defaultValue: '')
        string(name: 'MULTI_AZ', defaultValue: '')
        string(name: 'ACTION_TYPE', defaultValue: '')
        string(name: 'K8S_VERSION', defaultValue: '')
        string(name: 'NODE_TYPE', defaultValue: '')
        string(name: 'NODE_IMAGE', defaultValue: '')
        string(name: 'NODES_MIN', defaultValue: '')
        string(name: 'NODES_MAX', defaultValue: '')
        string(name: 'NODES_INITIAL', defaultValue: '')
        string(name: 'VIRTUAL_NETWORK', defaultValue: '')
        string(name: 'CLOUD_PROVIDER', defaultValue: '')
        string(name: 'GCP_PROJECT', defaultValue: '')
        string(name: 'GCP_CREDENTIALS', defaultValue: '')
        string(name: 'AWS_ACCESS_KEY_ID', defaultValue: '')
        string(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '')
        string(name: 'ARM_SUBSCRIPTION_ID', defaultValue: '')
        string(name: 'ARM_CLIENT_ID', defaultValue: '')
        string(name: 'ARM_CLIENT_SECRET', defaultValue: '')
        string(name: 'ARM_TENANT_ID', defaultValue: '')
    }

    stages {
                stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage("Get JSON") {
            steps{
                script {
                 echo "Hello ${params.CLOUD_PROVIDER}"
                 echo "Hello ${params.CLUSTER_NAME}" 
                 sh '''
                 ls
                 export type=$(cat ./json | /tmp/jq .cloud_type)
                 echo $type

                 '''
                }
            }
        }
        stage('EKS trigger') {
            when {
                expression {
                    "${params.CLOUD_PROVIDER}" == "AWS";
                }
            }
            steps {
                build job: 'DeployEKS',
                    parameters: [
                        string(name: 'CLUSTER_NAME', value: params.CLUSTER_NAME),
                        string(name: 'REGION', value: params.REGION) ,           
                        string(name: 'NODE_TYPE', value: params.NODE_TYPE),
                        string(name: 'NODE_IMAGE', value: params.NODE_IMAGE),
                        string(name: 'NODES_MIN', value: params.NODES_MIN),
                        string(name: 'NODES_MAX', value: params.NODES_MAX),
                        string(name: 'NODES_INITIAL', value: params.NODES_INITIAL),
                        string(name: 'MULTI_AZ', value: params.MULTI_AZ),
                        string(name: 'VIRTUAL_NETWORK', value: params.VIRTUAL_NETWORK),
                        string(name: 'K8S_VERSION', value: params.K8S_VERSION),
                        string(name: 'ACTION_TYPE', value: params.ACTION_TYPE),
                        string(name: 'GCP_CREDETIALS', value: params.GCP_CREDETIALS),
                        string(name: 'GCP_PROJECT', value: params.GCP_PROJECT),
                    ]
            }
        }
    }   
}